{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TURNS","Object","freeze","focus","id","seconds","label","relax","App","useState","turn","setTurn","secondsRemaining","setSecondsRemaining","isTimerRunning","setIsTimerRunning","useEffect","console","log","alert","timer","setTimeout","clearTimeout","className","onClick","disabled","formattedMinutes","Math","trunc","padStart","formattedSeconds","formatTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wOAIMA,G,MAAQC,OAAOC,OAAO,CAC1BC,MAAOF,OAAOC,OAAO,CACnBE,GAAI,QACJC,QAAS,KACTC,MAAO,UAETC,MAAON,OAAOC,OAAO,CACnBE,GAAI,QACJC,QAAS,IACTC,MAAO,aAiFIE,EAvEH,WAAO,IAAD,EACQC,mBAAST,EAAMG,OADvB,mBACTO,EADS,KACHC,EADG,OAEgCF,mBAASC,EAAKL,SAF9C,mBAETO,EAFS,KAESC,EAFT,OAG4BJ,oBAAS,GAHrC,mBAGTK,EAHS,KAGOC,EAHP,KAKhBC,qBAAU,WACRH,EAAoBH,EAAKL,WACxB,CAACK,IAEJM,qBAAU,WACJF,EACFG,QAAQC,IAAI,iBAEZD,QAAQC,IAAI,mBAEb,CAACJ,IAEJE,qBAAU,WACR,GAAKF,EAAL,CAGIF,GAAoB,IACtBG,GAAkB,GAClBI,MAAM,UAER,IAAMC,EAAQC,YAAW,WACvBR,EAAoBD,EAAmB,KACtC,KACH,OAAO,kBAAMU,aAAaF,OACzB,CAACR,EAAkBE,IAMtB,OACE,yBAAKS,UAAU,SACb,yBAAKA,UAAU,aAAf,wBAGA,yBAAKA,UAAS,oBAAeT,EAAiB,SAAW,aACvD,4BACES,UAAU,SACVC,QAVW,kBAAMb,EAAQD,EAAKN,KAAOJ,EAAMG,MAAMC,GAAKJ,EAAMO,MAAQP,EAAMG,QAW1EsB,SAAUX,GAHZ,QAOA,yBAAKS,UAAU,QAAQb,EAAKJ,OAC5B,yBAAKiB,UAAU,QAvDJ,SAAClB,GAClB,IAAMqB,EAAmB,UAAGC,KAAKC,MAAMvB,EAAU,KAAMwB,SAAS,EAAG,KAC7DC,EAAmB,UAAGzB,EAAU,IAAKwB,SAAS,EAAG,KACvD,MAAM,GAAN,OAAUH,EAAV,YAA8BI,GAoDDC,CAAWnB,IAClC,4BACEW,UAAU,QACVC,QApBW,kBAAMX,EAAoBH,EAAKL,UAqB1CoB,SAAUX,GAAkBF,IAAqBF,EAAKL,SAHxD,UAQF,yBAAKkB,UAAU,gBAEb,4BACEC,QA9BqB,kBAAMT,GAAmBD,IA+B9CW,SAAUb,GAAoB,GAE7BE,EAAiB,QAAU,YC3ElBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.65090583.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst SECONDS_IN_MINUTE = 60;\nconst TURNS = Object.freeze({\n  focus: Object.freeze({\n    id: 'FOCUS',\n    seconds: 25 * SECONDS_IN_MINUTE,\n    label: 'focus',\n  }),\n  relax: Object.freeze({\n    id: 'RELAX',\n    seconds: 5 * SECONDS_IN_MINUTE,\n    label: 'relax'\n  }),\n});\n\nconst formatTime = (seconds) => {\n  const formattedMinutes = `${Math.trunc(seconds / 60)}`.padStart(2, '0');\n  const formattedSeconds = `${seconds % 60}`.padStart(2, '0');\n  return `${formattedMinutes}:${formattedSeconds}`;\n};\n\nconst App = () => {\n  const [turn, setTurn] = useState(TURNS.focus);\n  const [secondsRemaining, setSecondsRemaining] = useState(turn.seconds);\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n\n  useEffect(() => {\n    setSecondsRemaining(turn.seconds);\n  }, [turn]);\n  \n  useEffect(() => {\n    if (isTimerRunning) {\n      console.log(\"timer started\");\n    } else {\n      console.log(\"timer stopped\");\n    }\n  }, [isTimerRunning]);\n  \n  useEffect(() => {\n    if (!isTimerRunning) {\n      return;\n    }\n    if (secondsRemaining <= 0) {\n      setIsTimerRunning(false);\n      alert('Done!');\n    }\n    const timer = setTimeout(() => {\n      setSecondsRemaining(secondsRemaining - 1);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [secondsRemaining, isTimerRunning]);\n  \n  const toggleIsTimerRunning = () => setIsTimerRunning(!isTimerRunning);\n  const resetTimer = () => setSecondsRemaining(turn.seconds);\n  const switchTurn = () => setTurn(turn.id === TURNS.focus.id ? TURNS.relax : TURNS.focus)\n\n  return (\n    <div className=\"timer\">\n      <div className=\"top-group\">\n        focus, relax, repeat\n      </div>\n      <div className={`mid-group ${isTimerRunning ? 'active' : 'inactive'}`}>\n        <button\n          className=\"switch\"\n          onClick={switchTurn}\n          disabled={isTimerRunning}\n        >\n          next\n        </button>\n        <div className=\"turn\">{turn.label}</div>\n        <div className=\"time\">{formatTime(secondsRemaining)}</div>\n        <button\n          className=\"reset\"\n          onClick={resetTimer}\n          disabled={isTimerRunning || secondsRemaining === turn.seconds}\n        >\n          reset\n        </button>\n      </div>\n      <div className=\"bottom-group\">\n        \n        <button\n          onClick={toggleIsTimerRunning}\n          disabled={secondsRemaining <= 0}\n        >\n          {isTimerRunning ? 'pause' : 'start'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}